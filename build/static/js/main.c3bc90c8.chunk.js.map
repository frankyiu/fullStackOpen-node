{"version":3,"sources":["services/persons.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","axios","get","then","respone","data","newObject","post","response","id","delete","put","Filter","props","onChange","searchName","PersonForm","addName","newName","phone","handleNameChange","handlePhoneChnage","onSubmit","value","type","Persons","personToShow","deleteOne","map","person","name","number","onClick","Notification","message","className","ErrorNotification","App","useState","persons","setPersons","setNewName","setPhone","nameToSearch","setNameToSearch","notiMessage","setNotiMessage","errorMessage","setErrorMessage","updateUI","personsService","console","log","showNotiMessage","setTimeout","showErrorMessage","useEffect","event","target","toLowerCase","preventDefault","find","obj","window","confirm","catch","error","filter","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3bc90c8.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () =>{\r\n    const request = axios.get(baseUrl)\r\n    return request.then(respone => respone.data)\r\n}\r\n\r\nconst create = newObject =>{\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteOne = (id) =>{\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) =>{\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default{getAll, create , deleteOne , update}","import React, { useState, useEffect} from 'react'\nimport personsService from './services/persons'\nimport './index.css'\n\nconst Filter = (props) =>{\n  return (\n    <div>filter shown with <input onChange={props.searchName}/></div>\n  )\n}\n\nconst PersonForm = (props) =>{\n  const {addName,newName,phone,handleNameChange,handlePhoneChnage} = props\n  return (\n    <form onSubmit={addName}>\n    <div>name: <input value={newName} onChange={handleNameChange}/></div>\n    <div>number: <input value={phone} onChange={handlePhoneChnage}/></div>\n    <div><button type=\"submit\">add</button></div>\n  </form>\n  )\n}\n\nconst Persons =(props) =>{\n  const {personToShow,deleteOne} = props\n  return (\n    <div>\n      {personToShow.map(person => \n        <div key={person.name}>{person.name} {person.number}  \n          <button onClick={()=>{deleteOne(person)}}>delete</button>\n        </div>)}\n    </div>\n  )\n}\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"noti\">\n      {message}\n    </div>\n  )\n}\nconst ErrorNotification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName ] = useState('')\n  const [phone, setPhone ] = useState('')\n  const [nameToSearch, setNameToSearch] = useState('')\n  const [notiMessage, setNotiMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const handleNameChange = (event) =>{\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneChnage = (event) =>{\n    setPhone(event.target.value)\n  }\n\n  const searchName = (event) =>{\n    setNameToSearch(event.target.value.toLowerCase())\n  }\n\n\n  const addName = (event) =>{\n    event.preventDefault()\n    const person = persons.find(person => person.name === newName)\n    const obj = {name:newName, number: phone}\n    if (person){\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\n        personsService\n        .update(person.id, obj)\n        .then(data =>{\n           showNotiMessage(`Added ${newName}`)\n           updateUI()\n        })\n        .catch(error => {\n          showErrorMessage(error.response.data.error)\n          updateUI()\n        })\n      }\n    }else{\n      personsService\n        .create(obj)\n        .then(data =>{\n          showNotiMessage(`Added ${newName}`)\n          updateUI()\n        })\n        .catch(error => {\n          showErrorMessage(error.response.data.error)\n          console.log(error.response.data)\n        })\n    }\n  }\n\n  const deleteOne = (person) =>{\n      if(window.confirm(`Delete ${person.name} ?`)){\n        personsService\n        .deleteOne(person.id)\n        .then(data=>{\n          updateUI()\n        })\n      }\n  }\n\n  const updateUI = ()=>{\n    personsService\n    .getAll()\n    .then(data =>{\n      console.log(data)\n      setPersons(data)\n    })\n  }\n\n  const showNotiMessage = (message)=>{\n    setNotiMessage(message)\n    setTimeout(() => {setNotiMessage(null)}, 5000)\n  }\n\n  const showErrorMessage = (message)=>{\n    setErrorMessage(message)\n    setTimeout(() => {setErrorMessage(null)}, 5000)\n  }\n\n  useEffect(()=>{\n    updateUI()\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notiMessage}/>\n      <ErrorNotification message={errorMessage}/>\n\n      <Filter searchName={searchName}/>\n      <h3>add a new</h3>\n      <PersonForm addName={addName} newName={newName} phone={phone} handleNameChange={handleNameChange} handlePhoneChnage={handlePhoneChnage}/>\n      <h2>Numbers</h2>\n      <Persons personToShow={persons.filter(person=> person.name.toLowerCase().includes(nameToSearch))}\n               deleteOne= {deleteOne}/>\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}